<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 配置Spring 主要配置和业务逻辑有关的 -->
	<!-- 数据源,事务控制 -->

	<!-- 扫描业务逻辑组件 -->
	<context:component-scan base-package="org.vector">
		<!-- 不扫控制器 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 配置数据库扫描 -->
	<context:property-placeholder
		location="classpath:jdbc.properties"/>
	<bean class="com.alibaba.druid.pool.DruidDataSource"
		id="pooledDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="filters" value="${jdbc.filters}"/>
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
		<property name="testOnReturn" value="${jdbc.testOnReturn}"/>
		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
		<property name="logAbandoned" value="${jdbc.logAbandoned}"/>
	</bean>

	<!-- 配置和mybatis的整合 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSessionFactory">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<!-- 指定数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定myabtis配置文件的位置 -->
		<property name="mapperLocations"
			value="classpath:mapper/*.xml"></property>
	</bean>


	<!-- 配置扫描器 自动将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有的dao接口的实现,加入到ioc容器中 -->
		<property name="basePackage" value="org.vector.crud.dao"></property>
	</bean>


	<!-- 事务控制的配置 -->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<!-- 控制主数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!-- 开启基于注解的事务 ,使用xml配置形式的事务(基本使用配置式) -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut
			expression="execution(* com.vector.curd.service..*.*(..))"
			id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<!-- -配置事务增强,事务如何切入 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- *代表这个切入点所有的方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以get开始的所有方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!-- 执行批量操作的SqlSession -->
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory"></constructor-arg>
		<!-- executorType 执行器 BATCH 批量的 -->
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
</beans>
