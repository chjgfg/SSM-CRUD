<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- SpringMVC的配置文件 -->

	<!-- 包含网站跳转逻辑的配置 -->
	<context:component-scan
		base-package="org.vector" use-default-filters="false">
		<!-- 指定要扫描的包 -->
		<!-- 只扫描控制器就是只扫描有@Controller注解的类 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller"></context:include-filter>
	</context:component-scan>

	<!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置视图响应的前缀 -->
		<property name="prefix" value="/WEB-INF/views/"></property>
		<!-- 配置视图响应的后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 两个标准配置 -->
	<!-- 将MVC不能处理的资源交给Tomcat这样就能实现动态静态资源都能访问成功 -->
	<!-- 在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，会在Spring 
		MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，对进入DispatcherServlet的URL进行筛查， 
		如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。 
		一般Web应用服务器默认的Servlet名称是"default"，因此DefaultServletHttpRequestHandler可以找到它。 
		如果你所有的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定： <mvc:default-servlet-handler 
		default-servlet-name="所使用的Web服务器默认使用的Servlet名称"/> -->
	<mvc:default-servlet-handler/>
	<!-- 能支持更高级的功能,配置注解驱动 相当于配置了最新的处理器映射器和最新的处理器适配器 -->
	<mvc:annotation-driven/>
</beans>
